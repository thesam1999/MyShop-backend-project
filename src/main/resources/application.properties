spring.application.name=myshop

#所有的 API 請求都會自動加上 /api 作為前綴，這裡不用讓Swagger可以顯示api
#server.servlet.context-path=/api

#JPA/Hibernate properties
spring.datasource.url=jdbc:postgresql://localhost:5432/myshop
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
# Hibernate 的 原生屬性（低階）
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Spring Data JPA 的 高階設定， 只想指定資料庫方言
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


#Mail 常規設定
# 設定「SMTP 主機（Host）」的屬性。
# 等於後面是Gmail 的 SMTP 伺服器主機名稱。
spring.mail.host=smtp.gmail.com
# SMTP 伺服器的通訊埠（Port）
spring.mail.port=587
#發送gmail帳號
spring.mail.username=sam665271@gmail.com
spring.mail.password=${MAIL_PASSWORD}
# 寄信時，需要驗證帳號密碼，啟用SMTP 認證（SMTP Authentication）； 如果SMTP 伺服器需要認證(通常都要)，但設定成 false，寄信會失敗。
spring.mail.properties.mail.smtp.auth=true
# 開啟 TLS 加密連線（比 SSL 安全、也是 Gmail 推薦的）。
spring.mail.properties.mail.smtp.starttls.enable=true

#JWT
jwt.auth.app=Myshop
jwt.auth.secret_key=${JWT_KEY}
jwt.auth.expires_in=3600
jwt.private-key-path=./keys/private_key.pem
jwt.public-key-path=./keys/public_key.pem


# Google SignIn
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_OAUTH2_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_OAUTH2_CLIENT_SECRET}
#google授權讓我取得使用者的基本資料和email (openid讓我的應用需要知道「這個使用者是誰」做登入必須要有openid )
spring.security.oauth2.client.registration.google.scope=openid, profile, email

#下面都是spring boot幫我們預設好的，可以省略！
# 授權成功跳回來的網頁，跟google cloud設定的一樣
# 這個處理端點是Spring security預設的，不用自己寫controller (要跟Oauth2上設定的網址一樣)
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
#OAuth 2.0 我們指定的授權模式 ( OAuth2 標準授權碼模式 )
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
#為這個授權命名
spring.security.oauth2.client.registration.google.client-name=Google

#設定 Google 作為 OAuth2 Provider 的詳細端點（endpoints）

# Google 提供的授權頁面網址，用戶第一次登入會跳過去這裡讓 Google 認證。
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
# 當使用者授權後，Spring 用這個網址去換取 access token。
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
#有了 access token 後，Spring 會使用這個網址去取得使用者的基本資料。
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo



#FileUpload
FILE_ZONE=0
FILE_UPLOAD_API_KEY=0
FILE_UPLOAD_HOST_URL=0